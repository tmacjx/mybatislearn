<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="tk.mybatis.simple.mapper.UserMapper">

    <resultMap id="userMap" type="tk.mybatis.simple.model.SysUser">
        <id property="id" column="id"/>
        <result property="userName" column="user_name"/>
        <result property="userPassword" column="user_password"/>
        <result property="userEmail" column="user_email"/>
        <result property="userInfo" column="user_info"/>
        <result property="headImg" column="head_img" jdbcType="BLOB"/>
        <result property="createTime" column="create_time" jdbcType="TIMESTAMP"/>
    </resultMap >
    <insert id="insert">
    insert into sys_user (
            id, user_name, user_password, user_email, user_info, head_img, create_time)
    values (#{id}, #{userName}, #{userPassword}, #{userEmail}, #{userInfo}, #{headImg, jdbcType=BLOB},
            #{createTime, jdbcType=TIMESTAMP})
    </insert>

    <!--插入检查空值，如果空指则走数据库默认值-->
    <insert id="insert2" useGeneratedKeys="true" keyProperty="id">
        insert into sys_user (
            user_name, user_password,
            <if test="userEmail != null and userEmail != ''" >
            user_email,
            </if>
            user_info, head_img, create_time)
       values (#{userName}, #{userPassword},
        <if test="userEmail != null and userEmail != ''" >
            #{userEmail},
        </if>
            #{userInfo}, #{headImg, jdbcType=BLOB},
            #{createTime, jdbcType=TIMESTAMP})
    </insert>

    <!--适配没有自增主键的数据库-->
    <insert id="insert3">
         insert into sys_user (
            user_name, user_password, user_email, user_info, head_img, create_time)
    values (#{userName}, #{userPassword}, #{userEmail}, #{userInfo}, #{headImg, jdbcType=BLOB},
            #{createTime, jdbcType=TIMESTAMP})

        <selectKey keyColumn="id" resultType="long" keyProperty="id" order="AFTER">
            select LAST_INSERT_ID();
        </selectKey>

    </insert>


    <!-- 批量插入 -->
    <insert id="insertList">
        insert into sys_user (
            user_name, user_password, user_email,
            user_info, head_img, create_time
        ) values
        <foreach collection="list" item="user" separator=",">
            (
             #{user.userName}, #{user.userPassword}, #{user.userEmail},
             #{user.userInfo}, #{user.headImg, jdbcType=BLOB},
             #{user.createTime, jdbcType=TIMESTAMP}
            )
        </foreach>

    </insert>

    <update id="updateById">
        update sys_user
            set user_name = #{userName},
                user_password = #{userPassword},
                user_email = #{userEmail},
                user_info = #{userInfo},
                head_img = #{headImg, jdbcType=BLOB},
                create_time = #{createTime, jdbcType=TIMESTAMP}
        where id = #{id}
    </update>

    <!--更新检查 null和''则不更新到数据库 -->
    <!-- set标签, 如果标签内有返回值, 则插入一个set, 如果set后面字符串以,结尾, 则删除该逗号  -->
    <update id="updateByldSelective">
        update sys_user

        <set>
            <if test="userName != null and userName != ''">
                user_name = #{userName},
            </if>
            <if test="userPassword != null and userPassword != ''">
                user_password = #{userPassword},
            </if>
            <if test="userEmail != null and userEmail != ''">
                user_email = #{userEmail},
            </if>
            <if test="userInfo != null and userInfo != ''" >
                user_info = #{userInfo},
            </if>
            <if test="headImg != null">
                head_img = #{headImg, jdbcType=BLOB},
            </if>
            <if test="createTime != null">
                create_time = #{createTime, jdbcType=TIMESTAMP},
            </if>
            id = #{id},
        </set>
        where id = #{id}
<!--        set-->
<!--            <if test="userName != null and userName != ''">-->
<!--                user_name = #{userName},-->
<!--            </if>-->
<!--            <if test="userPassword != null and userPassword != ''">-->
<!--                user_password = #{userPassword},-->
<!--            </if>-->
<!--            <if test="userEmail != null and userEmail != ''">-->
<!--                user_email = #{userEmail},-->
<!--            </if>-->
<!--            <if test="userInfo != null and userInfo != ''" >-->
<!--                user_info = #{userInfo},-->
<!--            </if>-->
<!--            <if test="headImg != null">-->
<!--                head_img = #{headImg, jdbcType=BLOB},-->
<!--            </if>-->
<!--            <if test="createTime != null">-->
<!--                create_time = #{createTime, jdbcType=TIMESTAMP},-->
<!--            </if>-->
<!--            id = #{id}-->
<!--            where id = #{id}-->
    </update>

    <!--更新参数为Map-->
    <update id="updateByMap">
        update sys_user
        set
        <foreach collection="_parameter" index="key" item="val" separator="," >
            ${key} = #{val}
        </foreach>
        where id = #{id}
    </update>
    <delete id="deleteById">
        delete from sys_user where id = #{id}
    </delete>


    <select id="selectById" resultMap="userMap">
		select * from sys_user where id = #{id}
	</select>

    <select id="selectAll" resultType="tk.mybatis.simple.model.SysUser">
        select id,
            user_name userName,
            user_password userPassword,
            user_email userEmail,
            user_info userInfo,
            head_img headImg,
            create_time createTime
        from sys_user
    </select>
    <select id="selectRoleByUserIdAndRoleEnabled" resultType="tk.mybatis.simple.model.SysRole">
        select r.id,
            r.role_name roleName,
            r.enabled,
            r.create_by createBy,
            r.create_time createTime
        from sys_user u inner join sys_user_role ur on u.id = ur.user_id
        inner join sys_role r on ur.role_id = r.id
        where u.id = #{userId} and r.enabled = #{enabled}
    </select>

    <!--查询排除 nul和空字符 -->
    <!--where标签，如果不满足，则无内容，如果where中if满足，where标签会自动把开头的and去掉 -->
    <select id="selectByUser" resultType="tk.mybatis.simple.model.SysUser">
        select id,
            user_name userName,
            user_password userPassword,
            user_email userEmail,
            user_info userInfo,
            head_img headImg,
            create_time createTime
        from sys_user
        <where>
            <if test="userName != null and userName != ''">
                and user_name like concat('%', #{userName}, '%')
            </if>
            <if test="userEmail != null and userEmail != ''">
                and user_email = #{userEmail}
            </if>
        </where>


<!--        where 1 = 1-->
<!--        <if test="userName != null and userName != ''">-->
<!--            and user_name like concat('%', #{userName}, '%')-->
<!--        </if>-->
<!--        <if test="userEmail != null and userEmail != ''">-->
<!--            and user_email = #{userEmail}-->
<!--        </if>-->

    </select>

    <!--查询 switch case default -->
    <select id="selectByIdOrUserName" resultType="tk.mybatis.simple.model.SysUser">
        select id,
            user_name userName,
            user_password userPassword,
            user_email userEmail,
            user_info userInfo,
            head_img headImg,
            create_time createTime
        from sys_user
        where 1 = 1
        <choose>
            <when test="id != null">
                and id = #{id}
            </when>
            <when test="userName != null and userName !=''">
                and user_name = #{userName}
            </when>
            <otherwise>
                and 1 = 2
            </otherwise>
        </choose>





    </select>

    <!-- foreach标签-->
    <!-- item：变量名， 值为从法代对象中取 出的每一个值-->
    <!-- 参数为List -->
    <select id="selectByIdList" resultType="tk.mybatis.simple.model.SysUser">
        select id,
	    	user_name userName,
	        user_password userPassword,
	        user_email userEmail,
	        user_info userInfo,
	        head_img headImg,
	        create_time createTime
	    from sys_user
    	where id in
    	<foreach collection="list" open="(" close=")" separator="," item="id" index="i">
            #{id}
        </foreach>

    </select>

    <!-- 参数为数组 -->
    <select id="selectByIdList2" resultType="tk.mybatis.simple.model.SysUser">
        select id,
        user_name userName,
        user_password userPassword,
        user_email userEmail,
        user_info userInfo,
        head_img headImg,
        create_time createTime
        from sys_user
        where id in
        <foreach collection="array" open="(" close=")" separator="," item="id" index="i">
            #{id}
        </foreach>

    </select>

    <!-- 多个参数 -->
    <select id="selectByIdOrUserNameList" resultType="tk.mybatis.simple.model.SysUser">
        select id,
        user_name userName,
        user_password userPassword,
        user_email userEmail,
        user_info userInfo,
        head_img headImg,
        create_time createTime
        from sys_user
        where id in
        <foreach collection="idArray" open="(" close=")" separator="," item="id" index="i">
            #{id}
        </foreach>
        and user_name in
        <foreach collection="nameArray" open="(" close=")" separator="," item="name" index="i">
            #{name}
        </foreach>

    </select>

<!--    &lt;!&ndash;继承userMap &ndash;&gt;-->
<!--    <resultMap id="userRoleMap" type="tk.mybatis.simple.model.SysUser" extends="userMap">-->
<!--        <result property="role.id" column="role_id"/>-->
<!--        <result property="role.roleName" column="role_name"/>-->
<!--        <result property="role.enabled" column="enabled"/>-->
<!--        <result property="role.createBy" column="create_by"/>-->
<!--        <result property="role.createTime" column="create_time" jdbcType="TIMESTAMP"/>-->
<!--    </resultMap>-->
    <!--继承userMap -->
    <resultMap id="userRoleMap" type="tk.mybatis.simple.model.SysUser" extends="userMap">
        <association property="role" columnPrefix="role_"
                     javaType="tk.mybatis.simple.model.SysRole"
                     resultMap="tk.mybatis.simple.mapper.RoleMapper.roleMap">
        </association>

    </resultMap>

    <!--关联的嵌套结果映射 -->
    <select id="selectUserAndRoleById" resultType="tk.mybatis.simple.model.SysUser">
        select
            u.id,
            u.user_name userName,
            u.user_password userPassword,
            u.user_email userEmail,
            u.user_info userInfo,
            u.head_img headImg,
            u.create_time createTime,
            r.id "role.id",
            r.role_name "role.roleName",
            r.enabled "role.enabled",
            r.create_by "role.createBy",
            r.create_time "role.createTime"
            from sys_user u
            inner join sys_user_role ur on u.id = ur.user_id
            inner join sys_role r on ur.role_id = r.id
            where u.id = #{id}
    </select>

<!--    <select id="selectUserAndRoleById2" resultMap="userRoleMap">-->
<!--        select-->
<!--            u.id,-->
<!--            u.user_name userName,-->
<!--            u.user_password userPassword,-->
<!--            u.user_email userEmail,-->
<!--            u.user_info userInfo,-->
<!--            u.head_img headImg,-->
<!--            u.create_time createTime,-->
<!--            r.id role_id,-->
<!--            r.role_name,-->
<!--            r.enabled enabled,-->
<!--            r.create_by create_by,-->
<!--            r.create_time role_create_Time-->
<!--            from sys_user u-->
<!--            inner join sys_user_role ur on u.id = ur.user_id-->
<!--            inner join sys_role r on ur.role_id = r.id-->
<!--            where u.id = #{id}-->
<!--    </select>-->
    <select id="selectUserAndRoleById2" resultMap="userRoleMap">
        select
            u.id,
            u.user_name userName,
            u.user_password userPassword,
            u.user_email userEmail,
            u.user_info userInfo,
            u.head_img headImg,
            u.create_time createTime,
            r.id role_role_id,
            r.role_name role_role_name,
            r.enabled role_enabled,
            r.create_by role_create_by,
            r.create_time role_create_Time
            from sys_user u
            inner join sys_user_role ur on u.id = ur.user_id
            inner join sys_role r on ur.role_id = r.id
            where u.id = #{id}
    </select>

    <!--association select用法 一条SQL转为多条SQL-->
    <resultMap id="userRoleMapSelect" extends="userMap"
               type="tk.mybatis.simple.model.SysUser" >
        <association property="role" column="{id=role_id}"
                     select="tk.mybatis.simple.mapper.RoleMapper.selectRoleById"/>
    </resultMap>
    
    <select id="selectUserRoleMapSelect" resultMap="userRoleMapSelect">
        select
            u.id,
            u.user_name,
            u.user_password,
            u.user_email,
            u.user_info,
            u.head_img,
            u.create_time,
            ur.role_id
        from sys_user u
        inner join sys_user_role ur on u.id = ur.user_id
        where u.id = #{id}
    </select>

</mapper>